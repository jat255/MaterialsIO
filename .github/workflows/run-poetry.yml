name: CI Test Suite
on: [push, pull_request]
jobs:
  run_test_suite:
    name: ${{ matrix.os }}-py${{ matrix.python-version }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
        poetry-version: ["1.1.13"]
        os: [ubuntu-latest, macos-latest] #, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install poetry
        run: pip install poetry==${{ matrix.poetry-version }}
        shell: bash
      - name: View Python version
        run: poetry run python --version
      - name: Install package
        run: poetry install -E all
      - name: Flake8
        run: poetry run flake8
      - name: Run tests
        run: poetry run pytest

  build_doc:
    name: Build documentation
    runs-on: ubuntu-latest
    env:
      poetry-version: "1.1.13"
      target_dir: './docs/_build'

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Install poetry
        run: pip install poetry==${{ env.poetry-version }}
      - name: Install package
        run: poetry install -E all
      - name: Flake8
        run: poetry run flake8
      - name: Build documentation
        run: poetry run python -m sphinx.cmd.build ./docs/source ${{ env.target_dir }} -n -E -a -j auto -b html
      - uses: actions/upload-artifact@v3
        with:
          path: ${{ env.target_dir }}
          name: doc_build
      - name: Sphinx-to-Pages
        env:
          INPUT_TARGET_BRANCH: gh-pages
          INPUT_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INPUT_TARGET_PATH: '.'
        run: |
          echo ::group:: Creating temp directory
          tmp_dir=$(mktemp -d -t pages-XXXXXXXXXX)
          echo Temp directory \"$tmp_dir\" is created
          echo ::endgroup::
          
          echo ::group:: Copying built docs to tmp_dir
          cp -vr ${{ env.target_dir }}/. ${tmp_dir}
          echo ::endgroup::

          repo_dir=${GITHUB_WORKSPACE}/${INPUT_REPOSITORY_PATH}
          doc_dir=$repo_dir/${INPUT_DOCUMENTATION_PATH}
          
          echo ::group:: Initialize various paths
          echo Workspace: ${GITHUB_WORKSPACE}
          echo Repository: ${repo_dir}
          echo Documentation: ${doc_dir}
          echo ::endgroup::

          echo ::group:: Setting up git repository
          echo Setting up git configure
          cd ${repo_dir}
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Sphinx-to-Pages Action"
          git stash
          branch_exist=$(git ls-remote --heads origin refs/heads/${INPUT_TARGET_BRANCH})
          if [ -z "${branch_exist}" ]; then
              echo Branch doesn\'t exist, create an empty branch
              git checkout --force --orphan ${INPUT_TARGET_BRANCH}
          else
              echo Branch exists, checkout to it
              git checkout --force ${INPUT_TARGET_BRANCH}
          fi
          git clean -fd
          echo ::endgroup::

          echo ::group:: Committing HTML documentation
          cd $repo_dir
          echo Deleting all file in repository
          rm -vrf *
          echo Copying HTML documentation to repository
          # Remove unused doctree
          rm -rf ${tmp_dir}/.doctrees
          cp -vr ${tmp_dir}/. $INPUT_TARGET_PATH
          echo Adding HTML documentation to repository index
          git add ${INPUT_TARGET_PATH}
          echo Committing changes to repository
          git commit --allow-empty -m "Add changes for ${GITHUB_SHA}"
          echo ::endgroup::
          
          echo "Push to branch INPUT_TARGET_BRANCH (${INPUT_TARGET_BRANCH})";
          [ -z "${INPUT_GITHUB_TOKEN}" ] && {
              echo 'Missing input "github_token: ${{ secrets.GITHUB_TOKEN }}".';
              exit 1;
          };
          remote_repo="https://${GITHUB_ACTOR}:${INPUT_GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
          echo "GITHUB_ACTOR: ${GITHUB_ACTOR}"
          echo "GITHUB_REPOSITORY: ${GITHUB_REPOSITORY}"
          echo "remote_repo is ${remote_repo}"
          git push "${remote_repo}" HEAD:${INPUT_TARGET_BRANCH} --follow-tags;